services:
  mongodb1:
    image: mongo:8
    container_name: my-ai-twin-mongo1
    command: ["--replSet", "mdb-replica-set", "--bind_ip_all", "--port", "30001"]
    volumes:
      - mongo-replica-1-data:/data/db
    ports:
      - "30001:30001"
    healthcheck:
      test: test $$(echo "rs.initiate({_id:'my-replica-set',members:[{_id:0,host:\"mongo1:30001\"},{_id:1,host:\"mongo2:30002\"},{_id:2,host:\"mongo3:30003\"}]}).ok || rs.status().ok" | mongo --port 30001 --quiet) -eq 1
      interval: 10s
      start_period: 30s
    restart: always

  mongodb2:
    image: mongo:8
    container_name: my-ai-twin-mongo2
    command: ["--replSet", "mdb-replica-set", "--bind_ip_all", "--port", "30002"]
    volumes:
      - mongo-replica-2-data:/data/db
    ports:
      - "30002:30002"
    restart: always

  mongodb3:
    image: mongo:8
    container_name: my-ai-twin-mongo3
    command: ["--replSet", "mdb-replica-set", "--bind_ip_all", "--port", "30003"]
    volumes:
      - mongo-replica-3-data:/data/db
    ports:
      - "30003:30003"
    restart: always


  # Data Crawlers
  data-Crawlers:
    image: "my-ai-twin-data-crawlers"
    container_name: my-ai-twin-data-crawlers
    platform: "linux/arm64"
    build:
      context: .
      dockerfile: .docker/Dockerfile.data_crawlers
    env_file:
      - .env
    ports:
      - "9010:8080"
    depends_on:
      - mongodb1
      - mongodb2
      - mongodb3
      # - mq

volumes:
  mongo-replica-1-data:
    # driver: local
  mongo-replica-2-data:
    # driver: local
  mongo-replica-3-data:
    # driver: local
  qdrant-data: